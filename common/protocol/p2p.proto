syntax = "proto3";


/**
 * This file contains all messages that are used in the melissa_p2p context.
 */

package melissa_p2p;

// Types

message StateId {
    int32 t = 1;
    int32 id = 2;
}

message StateServerSocket {
    string node_name = 1;
    uint32 port = 2;
    uint32 port_udp = 4;
    uint32 runner_id = 3;
}

message Peer {
  uint32 id = 1;
  StateServerSocket address = 2;
}

// Messages

message Ping { }

message Pong { }

message Weight {
    StateId state_id = 1;
    double weight = 2;
}

// application ranks to job socket on weight server
message JobRequest {
}

message JobResponse {
    StateId job = 1;
    StateId parent = 2;
    uint32 nsteps = 3;
}

// headrank <-> headrank
message StateAvailRequest {
    StateId state_id = 1;
    uint64 timestamp = 2;
}

message StateAvailResponse {
    StateId state_id = 1;
    StateServerSocket socket = 2;
    bool available = 3;
    uint64 timestamp = 4;
}

message StateRequest {
    StateId state_id = 1;
    uint64 timestamp = 2;
}

message StateResponse {
    StateId state_id = 1;
    repeated string filenames = 2; // TODO: now we could simply use scp in a first test ;)
    // TODO: OR: Append another message containing the acutal data
    // TODO: check that we don't delete anything what is about to be sent to anothe runner atm
    // if state not there will just  send back emnpty file names list
}

// fti headranks to general purpose request socket
message RunnerRequest {
    uint32 head_rank = 1;
    StateServerSocket socket = 2;
    StateId searched_state_id = 3;
}

message RunnerResponse {
    repeated StateServerSocket sockets = 1;
} // replies empty list if there are no others. if no others: look on pfs...

// when runner fti heads have nothing to do they can do a prefetch
// the server will send back things that are worth prefetching
// Runner to server what might be useful to prefetch:
message PrefetchRequest {
    repeated StateId cached_states = 1;
    uint32 capacity = 2;  // unused on server side so far.
    uint32 free = 3;  // unused on server side so far.
}

message PrefetchResponse {
    repeated StateId pull_states = 1;
    repeated StateId dump_states = 2;  // unused on server side so far.
}

message DeleteRequest {
    repeated StateId cached_states = 1;
}

message DeleteResponse {
    StateId to_delete = 1;
}



message RunnerCrashed {
    uint32 runner_id = 1;
}

message RunnerUp {
    uint32 runner_id = 1;
}

message StopStudy {
    enum ExitCode {
        SUCCESS = 0;
        FAILURE = 1;
    }

    ExitCode exit_code = 1;
}

message ValidationRequest {
    repeated StateId to_validate = 1; 
}

message ValidationResponse {
    StateId is_validated = 1; 
}

// Wrapper message

message Message {
    uint32 runner_id = 1;
    oneof content {  // one could optimize out pingpong and have smaller message numbers...

        Ping ping = 2;
        Pong pong = 3;

        // Messages Runner - Server-Job socket
        JobRequest job_request = 4;
        JobResponse job_response = 5;

        // Messages Runner - Server-General-Purpose socket
        Weight weight = 6;
        ValidationRequest validation_request = 20;
        ValidationResponse validation_response = 21;
        PrefetchRequest prefetch_request = 7;
        PrefetchResponse prefetch_response = 8;
        DeleteRequest delete_request = 9;
        DeleteResponse delete_response = 10;
        RunnerRequest runner_request = 11;
        RunnerResponse runner_response = 12;

        // Messages Runner - Runner
        StateAvailRequest state_avail_request = 18;
        StateAvailResponse state_avail_response = 19;
        StateRequest state_request = 13;
        StateResponse state_response = 14;

        // Messages Server - Launcher
        RunnerCrashed runner_crashed = 15;
        RunnerUp runner_up = 16;
        StopStudy stop_study = 17;
    }
}

// MPI Messages App core to server:
/*message DownloadState {*/
    /*StateId parent = 1;*/
/*}*/
